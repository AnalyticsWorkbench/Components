debugSource('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
debugSource('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
responsibilities
debugSource('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
responsibilities[row,3]
alternatives[3]
responsibilities
sim[1,3] + responsibilities[2,3]
sim[1,3] + responsibilities[4,3]
sim[1,3] + responsibilities[6,3]
debugSource('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
sim[1,3] + responsibilities[4,3]
responsibilities[row, neighs]
as.vector(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives - max(responsibilities[row, neighs]))
0.5 * as.vector(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives - max(responsibilities[row, neighs]))
0.5 * responsibilities[row,nneighs] +
0.5 * (as.vector(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives - max(responsibilities[row, neighs])))
as.vector(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives - max(responsibilities[row, neighs]))
nneighs
as.vector(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives)
alternatives
as.vector(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives - max(responsibilities[row, neighs]))
as.vector(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - (alternatives + max(responsibilities[row, neighs])))
alternatives - max(responsibilities[row, neighs])
alternatives
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs])
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives - max(responsibilities[row, neighs])
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives
-4.74-(-8.34)
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs])
alternatives
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives
-6.71-(-8.35)
alternatives - max(responsibilities[row, neighs])
-6.71-(-4.74)
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives - max(responsibilities[row, neighs])
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - (alternatives - max(responsibilities[row, neighs]))
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives + max(responsibilities[row, neighs])
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - (alternatives + max(responsibilities[row, neighs]))
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives + max(responsibilities[row, neighs])
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives - max(responsibilities[row, neighs])
5.4.3
-5+4+3
debugSource('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives - max(responsibilities[row, neighs])
(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives) - max(responsibilities[row, neighs])
max(responsibilities[row, neighs])
responsibilities[row, ]
row
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - (alternatives - max(responsibilities[row, neighs]))
debugSource('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
responsibilities
responsibilities
source('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
debugSource('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
as.vector(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - (alternatives - max(responsibilities[row, neighs])))
(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs])) - (alternatives - max(responsibilities[row, neighs]))
(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs])) - (alternatives + max(responsibilities[row, neighs]))
(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives) + max(responsibilities[row, neighs])
(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives) - max(responsibilities[row, neighs])
alternatives
debugSource('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - max(responsibilities[row, neighs]) - alternatives
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs])
alternatives
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - alternatives
alternatives
sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - max(responsibilities[row, neighs])
0.5 * responsibilities[row,nneighs] +
0.5 * (as.vector(sim[row,nneighs] + colMax(responsibilities[neighs, nneighs]) - max(responsibilities[row, neighs])))
responsibilities[row, neighs]
source('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
plot(g)
res$res
res$av
which(diag(res$av) > 0)
which(diag(res$res) > 0)
res$res + res$av
res$res
res$av
res$av[3,3]
res$res[3,3]
res$res[1,1]
res$res[2,2]
res$av[1,1]
debugSource('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
responsibilities
debugSource('C:/Users/hecking/sonstige Forschung/homophily_small_worlds/ap_network_clustering.R', echo=TRUE)
res <- apClustGraph(sim, g)
row
alternatives
neighs
asMAt
asMat
alternatives
sim
sim[row, neighs]
sim[row, neighs] - alternatives
alternatives
install.packages("phrasemachine")
require(phrasemachine)
requier(tm)
require(tm)
setwd("~")
stmts <- read.csv2("Marielle's files/test.csv")
stmts
stmts <- read.csv2("Marielle's files/test.csv", as.is=TRUE)
vs <- VectorSource(stmts$Statement)
vs
Corpus(vs)
docs <- Corpus(vs)
docs
names(docs)
?phrasemachine
res <- phrasemachine(docs)
res
res[[1]]
res[[2]]
res[[3]]
phrasemachine(stmts$Statement)
res <- phrasemachine(stmts$Statement, return_tag_sequences = TRUE)
1/6
3/10
cut(1:10, breaks = 2)
?cut
seg(0, 10, by=2)
seq(0, 10, by=2)
cut(1:10, seq(0, 10, by=2))
-10:5
29.7*2
1:20 - 20:1
plot(1:20 - 20:1)
plot(1 - (1:20 - 20:1))
plot(abs(1:20 - 20:1))
plot((1:20 - 20:1)^2)
install.package("arules")
install.packages("arules")
dat <- read.csv2("../sonstige Forschung/moodle_data/cases_logic_13_02_14.csv")
head(dat)
dat$timestamp
as.POSIXct(dat$timestamp)
install.packages("lubridate")
require(lubridate)
View(dat)
dmy_hm(dat$timestamp)
ts <- dmy_hm(dat$timestamp)
min(ts)
max(ts)
cut(ts, by="minutes")
cut(ts, by="min")
cut(ts, breaks = ="min")
cut(ts, breaks = "min")
cut(ts, breaks = "minutes")
cut(ts, breaks = "days")
cut(ts, breaks = "minutes")
cut(ts, breaks = "mins")
cut(ts, breaks = "1 min")
cut(ts, breaks = "1 hour")
cut(ts, breaks = "10 min")
require(dplyr)
?table
1+TRUE
require(igraph)
?get.adjacency
tg <- graph(c(1,2,1,2,2,3,3,4))
as_adj(tg)
as_adjacency_matrix(tg)
df <- data_frame(a=1:5, b=5:1)
df %>% transmute(a=a-b)
df %>% mutate(a=a-b)
source('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
ts[1]
ts[1] - ts[2]
ts[1]
ts[2]
ts[3]
ts[1] - ts[3]
ts[1] - ts[3] <- 10
ts[1] - ts[3] < 10
ts[1] - ts[3] < 6
ts[3] - ts[1]
ts[3] - ts[1] < 10
ts[3] - ts[1] < 5
ts[3] - ts[1] < 6
ts[3] - ts[1] < 7
make_difftime(minutes=10)
ts[3] - ts[1] < make_difftime(minutes=10)
ts[3] - ts[1] < make_difftime(minutes=600)
source('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
cm <- getCoocurrenceMatrix(dat)
cm <- getCoocurrenceMatrix(dat, 10)
bind_rows(list(c(1,2,3), c(3,2,1), c(6,5,4)))
?bind_rows
bind_rows(list(data_frame(a=1, b=2:3), data_frame(a=3,b=5:10)))
source('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
cm <- getCoocurrenceMatrix(dat, 10)
View(cm)
cm[1,]
head(dat)
View(as.matrix(cm))
source('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
cm <- getCoocurrenceMatrix(dat, 10)
cm[1,]
View(as.matrix(cm))
cm[,1]
dim(cm)
View(as.matrix(cm))
debugSource('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
cm <- getCoocurrenceMatrix(dat, 10)
offset
inWindow
.$taskID[offset]
debugSource('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
cm <- getCoocurrenceMatrix(dat, 10)
debugSource('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
cm <- getCoocurrenceMatrix(dat, 10)
head(df)
?select
df
df %<>% mutate(c=a+b)
df <-  mutate(df, c=a+b)
df
df %>% select(b, c)
source('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
cm <- getCoocurrenceMatrix(dat, 10)
source('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
cm <- getCoocurrenceMatrix(dat, 10)
cm[1,]
source('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
cm <- getCoocurrenceMatrix(dat, 10)
?ungroup
source('C:/Users/hecking/sonstige Forschung/sequence_mining/action_mining/activity_mining.R', echo=TRUE)
cm <- getCoocurrenceMatrix(dat, 10)
View(as.matrix(cm))
cm <- cm[-1,-1]
View(as.matrix(cm))
d <- diag(cm)
d <- diag(as.matrix(cm))
d
a <- diag(d, nrow=nrow(cm), ncol=ncol(cm)) - as.matrix(cm)
a
View(a)
diag(d, nrow=nrow(cm)
)
d
a <- diag(d, nrow=nrow(cm), ncol=ncol(cm)) - as.matrix(cm)
diag(a) <- d
ed <- eigen(a)
ed$values
View(ed$vectors)
View(ed$vectors[,60:71])
sc <- ed$vectors[,60:71]
row.names(sc) <- row.names(a)
View(sc)
clusters <- kmeans(sc, 20)
clusters$cluster
plot(clusters)
View(clusters$cluster)
View(as.data.frame(clusters$cluster))
View(dat)
c1 <- sc[dat$taskID[dat$caseID == "case 1"]]
View(c1)
c1 <- sc[dat$taskID[dat$caseID == "case 1"],]
dat
dat$taskID[dat$caseID == "case 1"]
View(dat$taskID[dat$caseID == "case 1"])
View(dat$taskID[dat$caseID == "case 1",])
View(dat[dat$caseID == "case 1",])
View(dat)
dat <- dat[dat$taskID != "Einführung in die Logik WS13/14",]
dat <- dat[as.character(dat$taskID) != "Einführung in die Logik WS13/14",]
View(dat)
c2 <- dat[dat$caseID == "case 2"]
c2 <- dat[dat$caseID == "case 2",]
View(c2)
sc2 <- sc[c2$taskID,]
View(sc2)
sc2 <- sc[as.character(c2$taskID),]
View(sc2)
require(ggplot2)
require(tidyr)
gather(sc2, topic, value)
gather(as_data_frame(sc2, topic, value))
gather(as_data_frame(sc2), topic, value)
gather(data_frame(sc2), topic, value)
gather(as.data.frame(sc2), topic, value)
as.data.frame(sc2)
as.data.frame(sc2)
sc2
as.data.frame(sc2)
as.data.frame(sc2, NULL)
df2 <- data_frame(action=rownames(sc2), sc2)
df2 <- bind_rows(action=rownames(sc2), sc2)
df2 <- bind_rows(data_frame(action=rownames(sc2)), sc2)
df2 <- as.data.frame(sc2, row.names = NULL)
head(df2)
View(df2)
gather(df2, topic, value)
df2$action <- rownames(df2)
?gather
gather(df2, topic, value, -13)
df2$seq <- 1:nrow(df2)
gather(df2, topic, value, c(-13,-14))
df2 <- gather(df2, topic, value, c(-13,-14))
ggplot(df, aes(x=seq, y=value, color=topic)) + geom_line()
ggplot(df, aes(x=df$seq, y=value, color=topic)) + geom_line()
ggplot(df2, aes(x=seq, y=value, color=topic)) + geom_line()
View(dat2)
df2
View(df2)
ggplot(df2, aes(x=seq, y=value, color=topic)) + geom_line()
ggplot(df2, aes(x=seq, y=value, color=topic)) + geom_line()
a
m <- matrix(1:25, ncol=5)
diag(m) - m
diag(m)
diag(m)
diag(m, nrow=5, ncol=5)
diag(diag(m), nrow=5, ncol=5)
diag(diag(m), nrow=5, ncol=5) - m
diag(diag(m), nrow=5, ncol=5)
m
View(as.matrix(cm))
ev
ed$values
?eigen
10:1
?stats::filter
stats::filter(1:10, rep(1/3, 3))
stats::filter(1:10, rep(1/3, 3), sides = 2)
stats::filter(1:10, rep(2, 3), sides = 2)
1:10
stats::filter(1:10, rep(1/2, 3), sides = 2)
stats::filter(1:10, rep(1/3, 3), sides = 2)
stats::filter(1:10, rep(1/3, 3), sides = 2, init = 0)
stats::filter(rbind(1:10, 10:1), rep(1/3, 3), sides = 2)
stats::filter(cbind(1:10, 10:1), rep(1/3, 3), sides = 2)
as.matrix(stats::filter(cbind(1:10, 10:1), rep(1/3, 3), sides = 2))
stats::filter(cbind(1:10, 10:1), rep(1/3, 3), sides = 2) + 5
dist(1:5, 4:9)
dist(1:5, 4:8)
dist(cbind(1:4,2:5))
degree_distribution(g)
degree_distribution(graph.full(10))
plot(degree_distribution(graph.atlas(102)))
plot(degree_distribution(graph.atlas(102)), type=2k)
plot(degree_distribution(graph.atlas(102)), type="l")
plot(tanh(1:10))
plot(tanh(-10:10))
plot(1 - tanh(-10:10)^2)
require(tidyr)
datOld <- read.csv2("../Downloads/AIED_PC_old.csv")
?unite
datOld <- read.csv2("../Downloads/AIED_PC_old.csv") %>% unite("name", firstname, lastname, sep=" ")
View(dataOld)
View(datOld)
datOld <- read.csv2("../Downloads/AIED_PC_old.csv") %>% unite("name", firstname, lastname, sep=" ")
datOld <- read.csv2("../Downloads/AIED_PC_old.csv") %>% unite("name", firstname, lastname, sep=" ")
require(dplyr)
?join
datNew <- read.csv2("../Downloads/AIED_PC_new.csv")
dat <- dataNew %>% full_join(dataOld)
dat <- datNew %>% full_join(dataOld)
dat <- datNew %>% full_join(datOld)
View(dat)
nrow(datNew)
nrow(datOld)
nrow(dat)
write.csv2(dat, "AIED_PC.csv")
dat
nrow(dat)
require(igraph)
g <- barabasi.game(100)
degree.distribution(g) %>% plot
degree.distribution(g)
g2 <- barabasi.game(100)
g2 <- barabasi.game(100, power = 3)
degree.distribution(g2)
g <- barabasi.game(1000, power=1)
g2 <- barabasi.game(1000, power=2)
g3 <- barabasi.game(1000, power=2.5)
g4 <- barabasi.game(1000, power=3)
plot(degree.distribution(g))
plot(degree.distribution(g), type="l")
lines(g2, type="l", lty=2)
lines(g2, lty=2)
lines(degree.distribution(g2), lty=2)
plot(degree.distribution(g4), type="l")
plot(degree.distribution(g), type="l")
lines(degree.distribution(g3), lty=2)
email <- barabasi.game(1000, power=1.81)
actors <- barabasi.game(1000, power=2.3)
plot(degree.distribution(email), type="l")
email <- barabasi.game(1000, m = 3, power=1.81)
plot(degree.distribution(email), type="l")
email <- barabasi.game(1000, power=1.81)
plot(degree.distribution(email), type="l")[1:100]
plot(degree.distribution(email)[1:100], type="l")
plot(degree.distribution(email)[1:60], type="l")
plot(degree.distribution(email)[1:20], type="l")
plot(degree.distribution(actors), type="l")
plot(degree.distribution(email), type="l")
plot(degree.distribution(g), type="l")
plot(degree.distribution(g2), type="l")
g2 <- barabasi.game(1000, power=1.3)
plot(degree.distribution(g2), type="l")
plot(degree.distribution(g), type="l")
lines(degree.distribution(g2), lty=2)
g2 <- barabasi.game(1000, power=1.5)
lines(degree.distribution(g2), lty=2)
require(igraph)
g <- erdos.renyi.game(100, p.or.m = 0.05)
g
is.directed(g)
plot(g)
mean(degree(g))
ecount(g)
ev <- as_adjacency_matrix(g)  %>% eigen
ev$values
require(ggplot2)
g2 <- barabasi.game(100, m=250)
ev2 <- as_adjacency_matrix(g2)  %>% eigen
d1 <- data_frame(ev=1:length(ev$values), value=ev$values, type="er")
require(dplyr)
d2 <- data_frame(ev=1:length(ev2$values), value=ev2$values, type="ba")
bind_rows(d1,d2) %>% ggplot(aes(x=ev, y=value, colour=type, ptx=type)) + geom_line()
d1 <- data_frame(ev=1:length(ev$values), value=ev$values, type="er")
d1 <- data_frame(ev=1:length(ev$values), value=ev$values, type="er")
d1 <- data_frame(ev=1:length(ev$values), value=ev$values, type="er")
d2 <- data_frame(ev=1:length(ev2$values), value=ev2$values, type="ba")
d1 <- data_frame(ev=1:length(ev$values), value=ev$values, type="er")
ev1 <- as_adjacency_matrix(g)  %>% eigen
d1 <- data_frame(ev=1:length(ev1$values), value=ev1$values, type="er")
bind_rows(d1,d2) %>% ggplot(aes(x=ev, y=value, colour=type, ptx=type)) + geom_line()
ev2$values
g2 <- barabasi.game(100, m=250, directed=FALSE)
d2 <- data_frame(ev=1:length(ev2$values), value=ev2$values, type="ba")
ev2 <- as_adjacency_matrix(g2)  %>% eigen
d1 <- data_frame(ev=1:length(ev1$values), value=ev1$values, type="er")
ev2 <- as_adjacency_matrix(g2)  %>% eigen
bind_rows(d1,d2) %>% ggplot(aes(x=ev, y=value, colour=type, ptx=type)) + geom_line()
ev2$values
d2
ev2 <- as_adjacency_matrix(g2)  %>% eigen
ev2$values
degree(g2)
g2 <- barabasi.game(100, m=250, directed = F)
degree(g2)
g2 <- barabasi.game(100, m=5, directed = F)
ecount(g2)
ecount(g)
g <- erdos.renyi.game(100, 485, "gnm")
ecount(g)
ev2 <- as_adjacency_matrix(g2)  %>% eigen
ev1 <- as_adjacency_matrix(g)  %>% eigen
d1 <- data_frame(ev=1:length(ev1$values), value=ev1$values, type="er")
d2 <- data_frame(ev=1:length(ev2$values), value=ev2$values, type="ba")
bind_rows(d1,d2) %>% ggplot(aes(x=ev, y=value, colour=type, ptx=type)) + geom_line()
ev2$vectors[,1]
ev2$vectors[,100]
ev2$values
?eigen
ev2$vectors[,1]
View(ev2$vectors)
ev2$vectors[,2]
is.directed(g2)
evc <- eigen_centrality(g2)
evc
evc$value
evc$vector
ev2$values
ev2$vectors[,1]
?eigen_centrality()
eigen_centrality(g2,scale=F)
eigen_centrality(g2,scale=F)$values
evc$vector
evc<-eigen_centrality(g2,scale=F)
evc$vector
?eigen
source('~/.active-rstudio-document')
debugSource('~/.active-rstudio-document')
debugSource('C:/Users/hecking/Java development/workbench-ng/trunk/workbench-components/components-executor/5315d6e7-6cdf-438e-947d-e0a73455d6d7_489349Bs_workspace/testscript.R')
debugSource('C:/Users/hecking/Java development/workbench-ng/trunk/workbench-components/components-executor/5315d6e7-6cdf-438e-947d-e0a73455d6d7_489349Bs_workspace/testscript.R')
cliques
debugSource('C:/Users/hecking/Java development/workbench-ng/trunk/workbench-components/components-executor/5315d6e7-6cdf-438e-947d-e0a73455d6d7_489349Bs_workspace/testscript.R')
comps
g
comps[[1]]
clq.graph
comps[[1]]$name
V(comps[[1]])$name
cliques
get.adjlist(g)
get.adjlist(clq.graph)
get.adjlist(clq.graph)$6
get.adjlist(clq.graph)[[6]]
source('C:/Users/hecking/Java development/workbench-ng/trunk/workbench-components/components-executor/5315d6e7-6cdf-438e-947d-e0a73455d6d7_489349Bs_workspace/testscript.R')
source('C:/Users/hecking/Java development/workbench-ng/trunk/workbench-components/components-executor/5315d6e7-6cdf-438e-947d-e0a73455d6d7_489349Bs_workspace/testscript.R')
debugSource('C:/Users/hecking/Java development/workbench-ng/trunk/workbench-components/components-executor/5315d6e7-6cdf-438e-947d-e0a73455d6d7_489349Bs_workspace/testscript.R')
g
cliques
