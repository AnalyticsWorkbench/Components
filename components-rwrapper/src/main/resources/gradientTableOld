require(igraph)

calculateGradients <- function(values) {
  
  gradients <- matrix(ncol=ncol(values), nrow=nrow(values))
  
  #values <- values[order(rowSums(values), decreasing=TRUE),]
  #if values is empty the gradient table will also be empty
  
  if (nrow(values) > 0) {
    
    for (i in 1:ncol(values)) {
      
      for (j in 1:nrow(values)) {
        
        if (is.na(values[j,i])) {
          
          values[j,i] <- 0	
        }
        
        if (i == 1) {
          
          gradients[j,i] <- values[j,i]
          
        } else {
          
          gradients[j,i] <- values[j,i] - values[j,i-1]
        }	
      }
    }
    colnames(gradients) <- colnames(values)
    rownames(gradients) <- rownames(values)
    
    gradients <- gradients[order(rowSums(gradients), decreasing=TRUE),]
  } else {
    
    gradients = values
  }
  gradients
}

gradientTable <- function(tables, labels) {
  
  values <- matrix()
  isFirst <- TRUE
  
  names <- c()
  
  # identify same entities by their labels.
  if (length(labels) > 1) {
    sapply(labels, function(l) {
      
      names <<- union(names, tables[[l]][,1])#rownames(tables[[l]]))
    })
    
    column <- 1
           
    sapply(labels, function(l) {
      
      if (isFirst) {
        
        isFirst <<- FALSE
        values <<- as.matrix(rep(0, length(names)))
      } else {
        
        values <<- cbind(values, rep(0, length(names)))
      }
        
      row <- 1
      
      sapply(names, function(name) {
          
        if (name %in% tables[[l]][,1]) {#rownames(tables[[l]])) {
            
          values[row,column] <<- tables[[l]][which(tables[[l]][,1] == name),2]#rownames(tables[[l]]) == name),1]
        }
          
        row <<- row + 1
      })
      
        column <<- column + 1
    })
    
    colnames(values) <- labels
    rownames(values) <- names
    
  } else {
    
    values <- tables[[1]]
  }

  calculateGradients(values)
}

resultData <- list(dataUrl='gradients.csv', decoratedUrl='null')

tab <- gradientTable(tables, labels)
write.csv(tab, file="gradients.csv")